name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build_and_clean:
    runs-on: ubuntu-latest

    services:
      # Docker-in-Docker service (allows Docker to be used inside a container)
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    # 1. Check out the repository
    - name: Check out repository
      uses: actions/checkout@v4

    # 2. Set up Docker Buildx (this is needed for multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 3. Install docker-compose (commented out since we are not using docker-compose here)
    # - name: Install docker-compose
    #   run: |
    #     curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    #     chmod +x /usr/local/bin/docker-compose
    #     docker-compose --version  # Verify installation

    # 4. Build the Docker image
    - name: Build the Docker image
      run: |
        cd src
        docker build . --file Dockerfile --tag oak_camera_driver_image:latest

    # 5. Set up environment variables (if needed, this can be uncommented)
    # - name: Set up environment variables
    #   run: echo "HARDWARE_CONNECTED=false" >> $GITHUB_ENV

    # 6. Run the tests (commented out)
    # - name: Run the tests using docker-compose
    #   run: |
    #     docker-compose -f docker-compose.yml up --abort-on-container-exit --exit-code-from test_runner
    #   env:
    #     LAUNCH_FILE: camera.launch.py  # Update with the correct launch file
    #     CONFIG_FILE: camera.yaml  # Update with the correct configuration file
    #     ROS_DISTRO: humble  # ROS distribution to be used in the Docker container

    # 7. Clean up (remove containers and images after test)
    - name: Clean up
      run: |
        docker rmi oak_camera_driver_image:latest
